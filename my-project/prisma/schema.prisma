// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db  {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id  Int  @id @default(autoincrement())
    name String  @unique
    password String 
    role  Role  @default(admin)
    project Project[]
    accounts  Account[]
}

model Account {
    id                Int     @id @default(autoincrement()) // Utilisation de autoincrement pour PostgreSQL
    type              String
    provider          String
    providerAccountId String
    token_type        String?
    refresh_token     String?
    access_token      String?
    id_token          String?
    scope             String?
    session_state     String?
    expires_at        Int?

    userId            Int     // Utilisation d'Int pour la clé étrangère
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Project {
    id  Int  @id @default(autoincrement())
    title  String 
    description String
    enterprise String
    role_date String
    stacks  Stack[]  @relation("ProjectStacks")
    images  Image[] 
    project_url  String?
    isLinkExist  Boolean @default(false)
    userId  Int
    user  User  @relation(fields: [userId], references: [id])
}

model Image {
    id  Int  @id  @default(autoincrement())
    url String
    projectId  Int
    project  Project  @relation(fields: [projectId], references: [id])
}

model Stack {
    id Int  @id  @default(autoincrement())
    name String  

    projects  Project[]  @relation("ProjectStacks")
}

enum Role {
    admin
    user
}
